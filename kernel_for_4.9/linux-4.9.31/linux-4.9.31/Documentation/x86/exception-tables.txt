     Kernel level exception handling in Linux
  Commentary by Joerg Pommnitz <joerg@raleigh.ibm.com>

When a process runs in kernel mode, it often has to access user
mode memory whose address has been passed by an untrusted program.
To protect itself the kernel has to verify this address.

In older versions of Linux this was done with the
int verify_area(int type, const void * addr, unsigned long size)
function (which has since been replaced by access_ok()).

This function verified that the memory area starting at address
'addr' and of size 'size' was accessible for the operation specified
in type (read or write). To do this, verify_read had to look up the
virtual memory area (vma) that contained the address addr. In the
normal case (correctly working program), this test was successful.
It only failed for a few buggy programs. In some kernel profiling
tests, this normally unneeded verification used up a considerable
amount of time.

Linux内核级异常处理

Joerg Pomunmz<joerg@raleigh.ibm.com>

当进程在内核模式下运行时，它通常必须访问一个用户模式的内存(被一个不受信任程序传递过来的).
为了保护自己,内核必须验证这个地址.

在旧版本的Linux中,这是用int verify_area (int type, const void * addr, unsigned long size)函数完成的(该函数后来被access_ok()取代).

此函数验证了从地址“addr”开始、大小为“size”的内存区域是否可用于类型(读或写)中指定的操作.
为此,verify_read必须查找包含地址addr的虚拟内存区域(vma).
在正常情况下(正确的工作程序),此测试是成功的.
它只在一些有缺陷的程序中失败了.
在一些内核评测测试中,这种通常不需要的验证占用了相当多的时间

To overcome this situation, Linus decided to let the virtual memory
hardware present in every Linux-capable CPU handle this test.

为了克服这种情况,Linus决定让每个支持Linux的CPU中的虚拟内存硬件来处理这个测试.

How does this work?
这是如何工作的？

Whenever the kernel tries to access an address that is currently not
accessible, the CPU generates a page fault exception and calls the
page fault handler

每当内核试图访问当前不可访问的地址时,CPU就会生成一个页面故障异常并调用page fault处理程序
void do_page_fault(struct pt_regs *regs, unsigned long error_code)

in arch/x86/mm/fault.c. The parameters on the stack are set up by
the low level assembly glue in arch/x86/kernel/entry_32.S. The parameter
regs is a pointer to the saved registers on the stack, error_code
contains a reason code for the exception.

在arch/x86/mm/fault.c中.
stack上的参数由arch/x86/kernel/entry_32.S中的低级别程序集glue设置.
参数regs是指向stack上保存的寄存器的指针,error_code包含异常的原因代码.

do_page_fault first obtains the unaccessible address from the CPU
control register CR2. If the address is within the virtual address
space of the process, the fault probably occurred, because the page
was not swapped in, write protected or something similar. However,
we are interested in the other case: the address is not valid, there
is no vma that contains this address. In this case, the kernel jumps
to the bad_area label.

do_page_fault首先从CPU控制寄存器CR2获得不可访问地址.
如果地址在进程的虚拟地址空间内,则可能发生fault,因为页面没有swapped in、写保护或类似情况.
然而,我们对另一种情况感兴趣:地址无效,没有包含此地址的vma.
在这种情况下,内核跳转到bad_area标签处.

There it uses the address of the instruction that caused the exception
(i.e. regs->eip) to find an address where the execution can continue
(fixup). If this search is successful, the fault handler modifies the
return address (again regs->eip) and returns. The execution will
continue at the address in fixup.

在那里它使用导致异常的指令的地址(即regs->eip)来查找可以继续执行的地址(修复).
如果此搜索成功,fault处理程序将修改返回地址(再次为regs->eip)并返回.
将在fixup中的地址继续执行.

Where does fixup point to?

Since we jump to the contents of fixup, fixup obviously points
to executable code. This code is hidden inside the user access macros.
I have picked the get_user macro defined in arch/x86/include/asm/uaccess.h
as an example. The definition is somewhat hard to follow, so let's peek at
the code generated by the preprocessor and the compiler. I selected
the get_user call in drivers/char/sysrq.c for a detailed examination.

fixup指向哪里？

既然我们跳转到fixup的内容,那么fixup显然指向可执行代码.
此代码隐藏在用户访问宏中.
我选择了arch/x86/include/asm/uaccess.h中定义的get_user宏作为示例.
这个定义有点难以理解,所以让我们来看看预处理器和编译器生成的代码.
我在drivers/char/sysrq.c中选择了get_user调用进行详细检查.

The original code in sysrq.c line 587:
源码在sysrq.c的第587行:
        get_user(c, buf);

The preprocessor output (edited to become somewhat readable):
预处理器输出(经过编辑以变得可读)
(
  {
    long __gu_err = - 14 , __gu_val = 0;
    const __typeof__(*( (  buf ) )) *__gu_addr = ((buf));
    if (((((0 + current_set[0])->tss.segment) == 0x18 )  ||
       (((sizeof(*(buf))) <= 0xC0000000UL) &&
       ((unsigned long)(__gu_addr ) <= 0xC0000000UL - (sizeof(*(buf)))))))
      do {
        __gu_err  = 0;
        switch ((sizeof(*(buf)))) {
          case 1:
            __asm__ __volatile__(
              "1:      mov" "b" " %2,%" "b" "1\n"
              "2:\n"
              ".section .fixup,\"ax\"\n"
              "3:      movl %3,%0\n"
              "        xor" "b" " %" "b" "1,%" "b" "1\n"
              "        jmp 2b\n"
              ".section __ex_table,\"a\"\n"
              "        .align 4\n"
              "        .long 1b,3b\n"
              ".text"        : "=r"(__gu_err), "=q" (__gu_val): "m"((*(struct __large_struct *)
                            (   __gu_addr   )) ), "i"(- 14 ), "0"(  __gu_err  )) ;
              break;
          case 2:
            __asm__ __volatile__(
              "1:      mov" "w" " %2,%" "w" "1\n"
              "2:\n"
              ".section .fixup,\"ax\"\n"
              "3:      movl %3,%0\n"
              "        xor" "w" " %" "w" "1,%" "w" "1\n"
              "        jmp 2b\n"
              ".section __ex_table,\"a\"\n"
              "        .align 4\n"
              "        .long 1b,3b\n"
              ".text"        : "=r"(__gu_err), "=r" (__gu_val) : "m"((*(struct __large_struct *)
                            (   __gu_addr   )) ), "i"(- 14 ), "0"(  __gu_err  ));
              break;
          case 4:
            __asm__ __volatile__(
              "1:      mov" "l" " %2,%" "" "1\n"
              "2:\n"
              ".section .fixup,\"ax\"\n"
              "3:      movl %3,%0\n"
              "        xor" "l" " %" "" "1,%" "" "1\n"
              "        jmp 2b\n"
              ".section __ex_table,\"a\"\n"
              "        .align 4\n"        "        .long 1b,3b\n"
              ".text"        : "=r"(__gu_err), "=r" (__gu_val) : "m"((*(struct __large_struct *)
                            (   __gu_addr   )) ), "i"(- 14 ), "0"(__gu_err));
              break;
          default:
            (__gu_val) = __get_user_bad();
        }
      } while (0) ;
    ((c)) = (__typeof__(*((buf))))__gu_val;
    __gu_err;
  }
);

WOW! Black GCC/assembly magic. This is impossible to follow, so let's
see what code gcc generates:

WOW! Black GCC/assembly magic.这没办法follow,所以让我们查看gcc生成的代码:

 >         xorl %edx,%edx
 >         movl current_set,%eax
 >         cmpl $24,788(%eax)
 >         je .L1424
 >         cmpl $-1073741825,64(%esp)
 >         ja .L1423
 > .L1424:
 >         movl %edx,%eax
 >         movl 64(%esp),%ebx
 > #APP
 > 1:      movb (%ebx),%dl                /* this is the actual user access */
 > 2:
 > .section .fixup,"ax"
 > 3:      movl $-14,%eax
 >         xorb %dl,%dl
 >         jmp 2b
 > .section __ex_table,"a"
 >         .align 4
 >         .long 1b,3b
 > .text
 > #NO_APP
 > .L1423:
 >         movzbl %dl,%esi

The optimizer does a good job and gives us something we can actually
understand. Can we? The actual user access is quite obvious. Thanks
to the unified address space we can just access the address in user
memory. But what does the .section stuff do?????

优化器做得很好,给了我们一些我们可以真正理解的东西.我们可以吗?
实际的用户访问非常明显.
由于统一的地址空间,我们可以直接访问用户内存中的地址.
但是.section stuff 是干什么的???

To understand this we have to look at the final kernel:

为了理解这一点,我们必须查看最终的内核:
 > objdump --section-headers vmlinux
 >
 > vmlinux:     file format elf32-i386
 >
 > Sections:
 > Idx Name          Size      VMA       LMA       File off  Algn
 >   0 .text         00098f40  c0100000  c0100000  00001000  2**4
 >                   CONTENTS, ALLOC, LOAD, READONLY, CODE
 >   1 .fixup        000016bc  c0198f40  c0198f40  00099f40  2**0
 >                   CONTENTS, ALLOC, LOAD, READONLY, CODE
 >   2 .rodata       0000f127  c019a5fc  c019a5fc  0009b5fc  2**2
 >                   CONTENTS, ALLOC, LOAD, READONLY, DATA
 >   3 __ex_table    000015c0  c01a9724  c01a9724  000aa724  2**2
 >                   CONTENTS, ALLOC, LOAD, READONLY, DATA
 >   4 .data         0000ea58  c01abcf0  c01abcf0  000abcf0  2**4
 >                   CONTENTS, ALLOC, LOAD, DATA
 >   5 .bss          00018e21  c01ba748  c01ba748  000ba748  2**2
 >                   ALLOC
 >   6 .comment      00000ec4  00000000  00000000  000ba748  2**0
 >                   CONTENTS, READONLY
 >   7 .note         00001068  00000ec4  00000ec4  000bb60c  2**0
 >                   CONTENTS, READONLY

There are obviously 2 non standard ELF sections in the generated object
file. But first we want to find out what happened to our code in the
final kernel executable:

在生成的对象文件中显然有2个非标准ELF部分.但首先,我们想了解最终内核可执行文件中的代码发生了什么：

 > objdump --disassemble --section=.text vmlinux
 >
 > c017e785 <do_con_write+c1> xorl   %edx,%edx
 > c017e787 <do_con_write+c3> movl   0xc01c7bec,%eax
 > c017e78c <do_con_write+c8> cmpl   $0x18,0x314(%eax)
 > c017e793 <do_con_write+cf> je     c017e79f <do_con_write+db>
 > c017e795 <do_con_write+d1> cmpl   $0xbfffffff,0x40(%esp,1)
 > c017e79d <do_con_write+d9> ja     c017e7a7 <do_con_write+e3>
 > c017e79f <do_con_write+db> movl   %edx,%eax
 > c017e7a1 <do_con_write+dd> movl   0x40(%esp,1),%ebx
 > c017e7a5 <do_con_write+e1> movb   (%ebx),%dl
 > c017e7a7 <do_con_write+e3> movzbl %dl,%esi

The whole user memory access is reduced to 10 x86 machine instructions.
The instructions bracketed in the .section directives are no longer
in the normal execution path. They are located in a different section
of the executable file:

整个用户内存访问减少到10条x86机器指令。
.section指令中括号内的指令不再位于正常执行路径中.它们位于可执行文件的不同部分:

 > objdump --disassemble --section=.fixup vmlinux
 >
 > c0199ff5 <.fixup+10b5> movl   $0xfffffff2,%eax
 > c0199ffa <.fixup+10ba> xorb   %dl,%dl
 > c0199ffc <.fixup+10bc> jmp    c017e7a7 <do_con_write+e3>

And finally:
 > objdump --full-contents --section=__ex_table vmlinux
 >
 >  c01aa7c4 93c017c0 e09f19c0 97c017c0 99c017c0  ................
 >  c01aa7d4 f6c217c0 e99f19c0 a5e717c0 f59f19c0  ................
 >  c01aa7e4 080a18c0 01a019c0 0a0a18c0 04a019c0  ................

or in human readable byte order:
或者以人类可读的字节顺序:
 >  c01aa7c4 c017c093 c0199fe0 c017c097 c017c099  ................
 >  c01aa7d4 c017c2f6 c0199fe9 c017e7a5 c0199ff5  ................
                               ^^^^^^^^^^^^^^^^^
                               this is the interesting part!
 >  c01aa7e4 c0180a08 c019a001 c0180a0a c019a004  ................

What happened? The assembly directives
发生了什么? 程序集指令

.section .fixup,"ax"
.section __ex_table,"a"

told the assembler to move the following code to the specified
sections in the ELF object file. So the instructions
告诉汇编程序将以下代码移动到ELF对象文件中的指定部分.所以指令
3:      movl $-14,%eax
        xorb %dl,%dl
        jmp 2b
ended up in the .fixup section of the object file and the addresses
最终出现在对象文件的.fixup部分和地址中
        .long 1b,3b
ended up in the __ex_table section of the object file. 1b and 3b
are local labels. The local label 1b (1b stands for next label 1
backward) is the address of the instruction that might fault, i.e.
in our case the address of the label 1 is c017e7a5:
the original assembly code: > 1:      movb (%ebx),%dl
and linked in vmlinux     : > c017e7a5 <do_con_write+e1> movb   (%ebx),%dl

最终出现在对象文件的__ex_table部分.1b和3b是局部标签.本地标签1b(1b代表向后的下一个标签1)是可能出错的指令的地址,
即在我们的情况下,标签1的地址是c017e7a5:
原始程序集代码: > 1:	movb（%ebx），%dl
并在vmlinux中链接: > c017e7a5 <do_con_write+e1> movb（%ebx),%dl

The local label 3 (backwards again) is the address of the code to handle
the fault, in our case the actual value is c0199ff5:
the original assembly code: > 3:      movl $-14,%eax
and linked in vmlinux     : > c0199ff5 <.fixup+10b5> movl   $0xfffffff2,%eax

本地标签3(再次向后)是要处理的fault的地址,在我们的情况下,实际值为c0199ff5:
原始程序集代码: > 3: movl $-14,%eax
并在vmlinux中链接	: > c0199ff5 <.fixup+10b5> movl$0xffffff2,%eax

The assembly code
 > .section __ex_table,"a"
 >         .align 4
 >         .long 1b,3b

becomes the value pair
becomes the value pair
 >  c01aa7d4 c017c2f6 c0199fe9 c017e7a5 c0199ff5  ................
                               ^this is ^this is
                               1b       3b
c017e7a5,c0199ff5 in the exception table of the kernel.
c017e7a5,c0199ff5 在内核的异常向量表中

So, what actually happens if a fault from kernel mode with no suitable
vma occurs?

那么,如果没有合适的vma的内核模式发生故障,实际会发生什么呢？

1.) access to invalid address:
 > c017e7a5 <do_con_write+e1> movb   (%ebx),%dl

1.) 访问无效地址：
 > c017e7a5<do_con_write+e1> movb (%ebx),%dl

2.) MMU generates exception

2) MMU生成异常

3.) CPU calls do_page_fault

3.）CPU调用do_page_fault

4.) do page fault calls search_exception_table (regs->eip == c017e7a5);

4.) do_page_fault调用search_exception_table(regs->eip==c017e7a5)

5.) search_exception_table looks up the address c017e7a5 in the
    exception table (i.e. the contents of the ELF section __ex_table)
    and returns the address of the associated fault handle code c0199ff5.

5.) search_exception_table在异常表中查找地址c017e7a5(即ELF部分__ex_table的内容),并返回相关故障处理代码c0199ff5的地址。

6.) do_page_fault modifies its own return address to point to the fault
    handle code and returns.

6.) do_page_fault修改其自身的返回地址以指向故障处理代码并返回.

7.) execution continues in the fault handling code.

7.) 在故障处理代码中继续执行.

8.) 8a) EAX becomes -EFAULT (== -14)
    8a）EAX变为-EFAULT（=-14)
    8b) DL  becomes zero (the value we "read" from user space)
    8b）DL变为零（我们从用户空间“读取”的值）
    8c) execution continues at local label 2 (address of the
        instruction immediately after the faulting user access).
    8c) 在本地标签2(紧接在错误用户访问之后的指令地址)处继续执行。

The steps 8a to 8c in a certain way emulate the faulting instruction.
步骤8a到8c以某种方式模拟错误指令.

That's it, mostly. If you look at our example, you might ask why
we set EAX to -EFAULT in the exception handler code. Well, the
get_user macro actually returns a value: 0, if the user access was
successful, -EFAULT on failure. Our original code did not test this
return value, however the inline assembly code in get_user tries to
return -EFAULT. GCC selected EAX to return this value.

主要就是这样.如果您看一下我们的示例,您可能会问为什么我们在异常处理程序代码中将EAX设置为-EFAULT.
实际上,get_user宏返回一个值:0,如果用户访问成功,则返回-EFAULT.
我们的原始代码没有测试这个返回值,但是get_user中的内联程序集代码试图返回-EFAULT。GCC选择EAX以返回此值。

NOTE:
Due to the way that the exception table is built and needs to be ordered,
only use exceptions for code in the .text section.  Any other section
will cause the exception table to not be sorted correctly, and the
exceptions will fail.

由于异常表的构建方式和需要排序的原因,
请仅对.text section 中的代码使用异常.
任何其他section都将导致异常表无法正确排序,并且异常将失败.

Things changed when 64-bit support was added to x86 Linux. Rather than
double the size of the exception table by expanding the two entries
from 32-bits to 64 bits, a clever trick was used to store addresses
as relative offsets from the table itself. The assembly code changed

当x86 Linux增加了64位支持时,情况发生了变化.不是通过将两个条目从32位扩展到64位来将异常表的大小增加一倍,
而是使用了一个巧妙的技巧来将地址存储为表本身的相对偏移量.

程序集代码已更改
from:
	.long 1b,3b
to:
        .long (from) - .
        .long (to) - .

and the C-code that uses these values converts back to absolute addresses
like this:

使用这些值的C代码会转换回绝对地址
这样地:

ex_insn_addr(const struct exception_table_entry *x)
{
	return (unsigned long)&x->insn + x->insn;
}

In v4.6 the exception table entry was expanded with a new field "handler".
This is also 32-bits wide and contains a third relative function
pointer which points to one of:

1) int ex_handler_default(const struct exception_table_entry *fixup)
   This is legacy case that just jumps to the fixup code
2) int ex_handler_fault(const struct exception_table_entry *fixup)
   This case provides the fault number of the trap that occurred at
   entry->insn. It is used to distinguish page faults from machine
   check.
3) int ex_handler_ext(const struct exception_table_entry *fixup)
   This case is used for uaccess_err ... we need to set a flag
   in the task structure. Before the handler functions existed this
   case was handled by adding a large offset to the fixup to tag
   it as special.
More functions can easily be added.

在v4.6中,异常表条目被扩展为一个新的字段“handler”.

这也是32位宽,并且包含第三相对函数指针,该指针指向以下之一:
1) int ex_handler_default（const struct exception_table_entry *fixup)
   这是只跳转到fixup代码的遗留情况

2) int ex_handler_fault(const struct exception_table_entry *fixup)
   此情况提供了在entry->insn处发生的陷阱的fault编号.
   它用于区分页面故障和机器检查。

3) int ex_handler_ext (const struct exception_table_entry *fixup)这种情况用于uaccess_err...
   我们需要在task structure中设置一个标志.
   在处理程序函数存在之前,这种情况是通过向修正添加一个大的偏移量来处理的,以将其标记为特殊.

可以轻松添加更多功能。
